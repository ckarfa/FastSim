// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in2,
        in3,
        in4,
        in5,
        in6,
        in7,
        in8,
        in9,
        in10,
        out1,
        out1_ap_vld,
        out2,
        out2_ap_vld,
        out3,
        out3_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input  [31:0] in2;
input  [31:0] in3;
input  [31:0] in4;
input  [31:0] in5;
input  [31:0] in6;
input  [31:0] in7;
input  [31:0] in8;
input  [31:0] in9;
input  [31:0] in10;
output  [31:0] out1;
output   out1_ap_vld;
output  [31:0] out2;
output   out2_ap_vld;
output  [31:0] out3;
output   out3_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out1_ap_vld;
reg out2_ap_vld;
reg out3_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] mult10_reg_326;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] add3_reg_331;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] add5_reg_336;
wire    ap_CS_fsm_state3;
wire  signed [31:0] mult4_fu_164_p2;
reg  signed [31:0] mult4_reg_352;
wire  signed [31:0] add1_s_fu_175_p2;
reg  signed [31:0] add1_s_reg_357;
wire  signed [31:0] tmp_fu_181_p2;
reg  signed [31:0] tmp_reg_362;
wire  signed [31:0] tmp4_fu_186_p2;
reg  signed [31:0] tmp4_reg_367;
wire  signed [31:0] add4_s_fu_192_p2;
reg  signed [31:0] add4_s_reg_372;
wire  signed [31:0] tmp6_fu_197_p2;
reg  signed [31:0] tmp6_reg_377;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] mult7_reg_394;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] mult11_reg_399;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] mult13_reg_404;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] add2_reg_409;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp3_reg_414;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp5_reg_419;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] add13_reg_424;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp7_reg_429;
wire   [31:0] grp_fu_219_p2;
wire    ap_CS_fsm_state6;
wire  signed [31:0] tmp_3_fu_147_p0;
wire  signed [31:0] tmp_4_fu_153_p0;
wire  signed [31:0] tmp_5_fu_159_p0;
wire   [31:0] tmp_5_fu_159_p2;
wire  signed [31:0] mult4_fu_164_p1;
wire   [31:0] tmp_4_fu_153_p2;
wire   [31:0] tmp_3_fu_147_p2;
wire   [31:0] tmp1_fu_169_p2;
wire  signed [31:0] add4_s_fu_192_p0;
wire  signed [31:0] tmp6_fu_197_p0;
wire   [31:0] add9_fu_242_p2;
wire   [31:0] shf1_fu_246_p2;
wire   [31:0] tmp2_fu_252_p2;
wire   [31:0] add14_fu_263_p2;
wire   [28:0] shf2_fu_267_p4;
wire   [31:0] shf2_1_fu_277_p1;
wire   [31:0] tmp8_fu_281_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in9),
    .din1(in6),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in7),
    .din1(in4),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in10),
    .din1(in10),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in6),
    .din1(in3),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in8),
    .din1(in6),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in8),
    .din1(in7),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in5),
    .din1(mult4_reg_352),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in1),
    .din1(add1_s_reg_357),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in5),
    .din1(tmp_reg_362),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in3),
    .din1(tmp4_reg_367),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in4),
    .din1(add4_s_reg_372),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in9),
    .din1(tmp6_reg_377),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add13_reg_424 <= grp_fu_234_p2;
        add2_reg_409 <= grp_fu_214_p2;
        mult11_reg_399 <= grp_fu_206_p2;
        mult13_reg_404 <= grp_fu_210_p2;
        mult7_reg_394 <= grp_fu_201_p2;
        tmp3_reg_414 <= grp_fu_224_p2;
        tmp5_reg_419 <= grp_fu_229_p2;
        tmp7_reg_429 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add1_s_reg_357 <= add1_s_fu_175_p2;
        add4_s_reg_372 <= add4_s_fu_192_p2;
        mult4_reg_352 <= mult4_fu_164_p2;
        tmp4_reg_367 <= tmp4_fu_186_p2;
        tmp6_reg_377 <= tmp6_fu_197_p2;
        tmp_reg_362 <= tmp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add3_reg_331 <= grp_fu_135_p2;
        add5_reg_336 <= grp_fu_141_p2;
        mult10_reg_326 <= grp_fu_129_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out1_ap_vld = 1'b1;
    end else begin
        out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out2_ap_vld = 1'b1;
    end else begin
        out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out3_ap_vld = 1'b1;
    end else begin
        out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add14_fu_263_p2 = (tmp7_reg_429 + mult13_reg_404);

assign add1_s_fu_175_p2 = (tmp_3_fu_147_p2 + tmp1_fu_169_p2);

assign add4_s_fu_192_p0 = in8;

assign add4_s_fu_192_p2 = ($signed(add4_s_fu_192_p0) + $signed(mult10_reg_326));

assign add9_fu_242_p2 = (tmp3_reg_414 + mult7_reg_394);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign mult4_fu_164_p1 = in4;

assign mult4_fu_164_p2 = ($signed(tmp_5_fu_159_p2) - $signed(mult10_reg_326));

assign out1 = grp_fu_219_p2;

assign out2 = (tmp5_reg_419 + tmp2_fu_252_p2);

assign out3 = (mult11_reg_399 + tmp8_fu_281_p2);

assign shf1_fu_246_p2 = add9_fu_242_p2 << 32'd3;

assign shf2_1_fu_277_p1 = shf2_fu_267_p4;

assign shf2_fu_267_p4 = add14_fu_263_p2_temp >> 32'd3;

assign add14_fu_263_p2_temp = add14_fu_263_p2 & 32'd4294967288;

assign tmp1_fu_169_p2 = (in2 + tmp_4_fu_153_p2);

assign tmp2_fu_252_p2 = (shf1_fu_246_p2 + add2_reg_409);

assign tmp4_fu_186_p2 = (32'd16 + in2);

assign tmp6_fu_197_p0 = in7;

assign tmp6_fu_197_p2 = ($signed(tmp6_fu_197_p0) + $signed(add5_reg_336));

assign tmp8_fu_281_p2 = (shf2_1_fu_277_p1 + add13_reg_424);

assign tmp_3_fu_147_p0 = in1;

assign tmp_3_fu_147_p2 = tmp_3_fu_147_p0 << 32'd3;

assign tmp_4_fu_153_p0 = in1;

assign tmp_4_fu_153_p2 = tmp_4_fu_153_p0 << 32'd1;

assign tmp_5_fu_159_p0 = in4;

assign tmp_5_fu_159_p2 = tmp_5_fu_159_p0 << 32'd4;

assign tmp_fu_181_p2 = (in2 + add3_reg_331);

endmodule //hls_macc
