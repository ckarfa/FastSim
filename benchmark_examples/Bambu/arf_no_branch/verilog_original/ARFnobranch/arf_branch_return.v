// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_macc,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=45,HLS_SYN_FF=679,HLS_SYN_LUT=846,HLS_VERSION=2018_3}" *)

module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        o1,
        o1_ap_vld,
        o2,
        o2_ap_vld,
        o3,
        o3_ap_vld,
        o4,
        o4_ap_vld,
        G1,
        G2,
        G3,
        G4,
        GG1,
        GG2,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i1;
input  [31:0] i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
output  [31:0] o1;
output   o1_ap_vld;
output  [31:0] o2;
output   o2_ap_vld;
output  [31:0] o3;
output   o3_ap_vld;
output  [31:0] o4;
output   o4_ap_vld;
input  [31:0] G1;
input  [31:0] G2;
input  [31:0] G3;
input  [31:0] G4;
input  [31:0] GG1;
input  [31:0] GG2;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg o1_ap_vld;
reg o2_ap_vld;
reg o3_ap_vld;
reg o4_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] op5_fu_132_p2;
reg   [31:0] op5_reg_288;
wire   [31:0] op6_fu_138_p2;
reg   [31:0] op6_reg_293;
wire   [31:0] op7_fu_144_p2;
reg   [31:0] op7_reg_298;
wire   [31:0] op8_fu_150_p2;
reg   [31:0] op8_reg_303;
wire  signed [31:0] op13_fu_161_p2;
reg  signed [31:0] op13_reg_308;
wire    ap_CS_fsm_state2;
wire  signed [31:0] op14_fu_171_p2;
reg  signed [31:0] op14_reg_316;
wire   [31:0] op17_fu_176_p2;
reg   [31:0] op17_reg_324;
wire    ap_CS_fsm_state3;
wire   [31:0] op18_fu_180_p2;
reg   [31:0] op18_reg_329;
wire  signed [31:0] tmp7_fu_184_p2;
reg  signed [31:0] tmp7_reg_334;
wire  signed [31:0] tmp8_fu_188_p2;
reg  signed [31:0] tmp8_reg_339;
wire  signed [31:0] op19_fu_192_p2;
reg  signed [31:0] op19_reg_344;
wire    ap_CS_fsm_state4;
wire  signed [31:0] op20_fu_196_p2;
reg  signed [31:0] op20_reg_350;
wire   [31:0] op1_fu_200_p2;
reg   [31:0] op1_reg_356;
wire    ap_CS_fsm_state5;
wire   [31:0] op2_fu_206_p2;
reg   [31:0] op2_reg_361;
wire   [31:0] op21_fu_212_p2;
reg   [31:0] op21_reg_366;
wire   [31:0] op22_fu_216_p2;
reg   [31:0] op22_reg_371;
wire  signed [31:0] tmp_fu_220_p2;
reg  signed [31:0] tmp_reg_376;
wire  signed [31:0] tmp2_fu_225_p2;
reg  signed [31:0] tmp2_reg_381;
wire   [31:0] op27_fu_238_p2;
reg   [31:0] op27_reg_386;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp1_fu_244_p2;
reg   [31:0] tmp1_reg_392;
wire   [31:0] tmp3_fu_248_p2;
reg   [31:0] tmp3_reg_397;
wire    ap_CS_fsm_state7;
wire   [31:0] op28_fu_252_p2;
wire  signed [31:0] op5_fu_132_p0;
wire  signed [31:0] op5_fu_132_p1;
wire  signed [31:0] op6_fu_138_p0;
wire  signed [31:0] op6_fu_138_p1;
wire  signed [31:0] op7_fu_144_p0;
wire  signed [31:0] op7_fu_144_p1;
wire  signed [31:0] op8_fu_150_p0;
wire  signed [31:0] op8_fu_150_p1;
wire   [31:0] tmp4_fu_156_p2;
wire   [31:0] tmp5_fu_166_p2;
wire  signed [31:0] op17_fu_176_p1;
wire  signed [31:0] op18_fu_180_p1;
wire  signed [31:0] tmp7_fu_184_p1;
wire  signed [31:0] tmp8_fu_188_p1;
wire  signed [31:0] op1_fu_200_p0;
wire  signed [31:0] op1_fu_200_p1;
wire  signed [31:0] op2_fu_206_p0;
wire  signed [31:0] op2_fu_206_p1;
wire  signed [31:0] op21_fu_212_p1;
wire  signed [31:0] op22_fu_216_p1;
wire  signed [31:0] tmp_fu_220_p1;
wire  signed [31:0] tmp2_fu_225_p1;
wire   [31:0] tmp9_fu_234_p2;
wire   [31:0] tmp6_fu_230_p2;
wire  signed [31:0] tmp1_fu_244_p1;
wire  signed [31:0] tmp3_fu_248_p1;
wire   [31:0] tmp11_fu_262_p2;
wire   [31:0] tmp10_fu_257_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op13_reg_308 <= op13_fu_161_p2;
        op14_reg_316 <= op14_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        op17_reg_324 <= op17_fu_176_p2;
        op18_reg_329 <= op18_fu_180_p2;
        tmp7_reg_334 <= tmp7_fu_184_p2;
        tmp8_reg_339 <= tmp8_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        op19_reg_344 <= op19_fu_192_p2;
        op20_reg_350 <= op20_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        op1_reg_356 <= op1_fu_200_p2;
        op21_reg_366 <= op21_fu_212_p2;
        op22_reg_371 <= op22_fu_216_p2;
        op2_reg_361 <= op2_fu_206_p2;
        tmp2_reg_381 <= tmp2_fu_225_p2;
        tmp_reg_376 <= tmp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op27_reg_386 <= op27_fu_238_p2;
        tmp1_reg_392 <= tmp1_fu_244_p2;
        tmp3_reg_397 <= tmp3_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        op5_reg_288 <= op5_fu_132_p2;
        op6_reg_293 <= op6_fu_138_p2;
        op7_reg_298 <= op7_fu_144_p2;
        op8_reg_303 <= op8_fu_150_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o1_ap_vld = 1'b1;
    end else begin
        o1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o2_ap_vld = 1'b1;
    end else begin
        o2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o3_ap_vld = 1'b1;
    end else begin
        o3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o4_ap_vld = 1'b1;
    end else begin
        o4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = (tmp11_fu_262_p2 + tmp10_fu_257_p2);

assign o1 = op13_reg_308;

assign o2 = op14_reg_316;

assign o3 = op27_reg_386;

assign o4 = op28_fu_252_p2;

assign op13_fu_161_p2 = (tmp4_fu_156_p2 + op5_reg_288);

assign op14_fu_171_p2 = (tmp5_fu_166_p2 + op7_reg_298);

assign op17_fu_176_p1 = G1;

assign op17_fu_176_p2 = ($signed(op13_reg_308) * $signed(op17_fu_176_p1));

assign op18_fu_180_p1 = G2;

assign op18_fu_180_p2 = ($signed(op14_reg_316) * $signed(op18_fu_180_p1));

assign op19_fu_192_p2 = ($signed(tmp8_reg_339) * $signed(tmp7_reg_334));

assign op1_fu_200_p0 = GG1;

assign op1_fu_200_p1 = i1;

assign op1_fu_200_p2 = ($signed(op1_fu_200_p0) * $signed(op1_fu_200_p1));

assign op20_fu_196_p2 = (op17_reg_324 + op18_reg_329);

assign op21_fu_212_p1 = G1;

assign op21_fu_212_p2 = ($signed(op20_reg_350) * $signed(op21_fu_212_p1));

assign op22_fu_216_p1 = G2;

assign op22_fu_216_p2 = ($signed(op19_reg_344) * $signed(op22_fu_216_p1));

assign op27_fu_238_p2 = (tmp9_fu_234_p2 + tmp6_fu_230_p2);

assign op28_fu_252_p2 = (tmp3_reg_397 + tmp1_reg_392);

assign op2_fu_206_p0 = GG2;

assign op2_fu_206_p1 = i2;

assign op2_fu_206_p2 = ($signed(op2_fu_206_p0) * $signed(op2_fu_206_p1));

assign op5_fu_132_p0 = G1;

assign op5_fu_132_p1 = i3;

assign op5_fu_132_p2 = ($signed(op5_fu_132_p0) * $signed(op5_fu_132_p1));

assign op6_fu_138_p0 = G2;

assign op6_fu_138_p1 = i4;

assign op6_fu_138_p2 = ($signed(op6_fu_138_p0) * $signed(op6_fu_138_p1));

assign op7_fu_144_p0 = G1;

assign op7_fu_144_p1 = i4;

assign op7_fu_144_p2 = ($signed(op7_fu_144_p0) * $signed(op7_fu_144_p1));

assign op8_fu_150_p0 = G2;

assign op8_fu_150_p1 = i3;

assign op8_fu_150_p2 = ($signed(op8_fu_150_p0) * $signed(op8_fu_150_p1));

assign tmp10_fu_257_p2 = ($signed(op13_reg_308) + $signed(op28_fu_252_p2));

assign tmp11_fu_262_p2 = ($signed(op14_reg_316) + $signed(op27_reg_386));

assign tmp1_fu_244_p1 = G2;

assign tmp1_fu_244_p2 = ($signed(tmp_reg_376) * $signed(tmp1_fu_244_p1));

assign tmp2_fu_225_p1 = i2;

assign tmp2_fu_225_p2 = ($signed(op19_reg_344) + $signed(tmp2_fu_225_p1));

assign tmp3_fu_248_p1 = G1;

assign tmp3_fu_248_p2 = ($signed(tmp2_reg_381) * $signed(tmp3_fu_248_p1));

assign tmp4_fu_156_p2 = (op6_reg_293 + i5);

assign tmp5_fu_166_p2 = (op8_reg_303 + i6);

assign tmp6_fu_230_p2 = (op1_reg_356 + op22_reg_371);

assign tmp7_fu_184_p1 = G1;

assign tmp7_fu_184_p2 = ($signed(op14_reg_316) * $signed(tmp7_fu_184_p1));

assign tmp8_fu_188_p1 = G2;

assign tmp8_fu_188_p2 = ($signed(op13_reg_308) * $signed(tmp8_fu_188_p1));

assign tmp9_fu_234_p2 = (op2_reg_361 + op21_reg_366);

assign tmp_fu_220_p1 = i1;

assign tmp_fu_220_p2 = ($signed(op20_reg_350) + $signed(tmp_fu_220_p1));

endmodule //hls_macc
