// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        o1,
        o1_ap_vld,
        o2,
        o2_ap_vld,
        o3,
        o3_ap_vld,
        o4,
        o4_ap_vld,
        G1,
        G2,
        G3,
        G4,
        GG1,
        GG2
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i1;
input  [31:0] i2;
input  [31:0] i3;
input  [31:0] i4;
input  [31:0] i5;
input  [31:0] i6;
output  [31:0] o1;
output   o1_ap_vld;
output  [31:0] o2;
output   o2_ap_vld;
output  [31:0] o3;
output   o3_ap_vld;
output  [31:0] o4;
output   o4_ap_vld;
input  [31:0] G1;
input  [31:0] G2;
input  [31:0] G3;
input  [31:0] G4;
input  [31:0] GG1;
input  [31:0] GG2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg o1_ap_vld;
reg o2_ap_vld;
reg o3_ap_vld;
reg o4_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_130_p2;
reg   [31:0] op5_reg_288;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] op6_reg_293;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] op7_reg_298;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] op8_reg_303;
wire  signed [31:0] op13_fu_159_p2;
reg  signed [31:0] op13_reg_308;
wire    ap_CS_fsm_state3;
wire  signed [31:0] op14_fu_169_p2;
reg  signed [31:0] op14_reg_315;
wire   [31:0] grp_fu_174_p2;
reg   [31:0] op17_reg_322;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_178_p2;
reg   [31:0] op18_reg_327;
wire  signed [31:0] grp_fu_182_p2;
reg  signed [31:0] tmp7_reg_332;
wire  signed [31:0] grp_fu_186_p2;
reg  signed [31:0] tmp8_reg_337;
wire  signed [31:0] op20_fu_194_p2;
reg  signed [31:0] op20_reg_342;
wire    ap_CS_fsm_state6;
wire  signed [31:0] grp_fu_190_p2;
reg  signed [31:0] op19_reg_348;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp_fu_218_p2;
reg  signed [31:0] tmp_reg_374;
wire  signed [31:0] tmp2_fu_223_p2;
reg  signed [31:0] tmp2_reg_379;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] op1_reg_384;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_204_p2;
reg   [31:0] op2_reg_389;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] op21_reg_394;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] op22_reg_399;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] tmp1_reg_404;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] tmp3_reg_409;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp4_fu_154_p2;
wire   [31:0] tmp5_fu_164_p2;
wire  signed [31:0] tmp_fu_218_p1;
wire  signed [31:0] tmp2_fu_223_p1;
wire   [31:0] tmp6_fu_240_p2;
wire   [31:0] tmp9_fu_236_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(G1),
    .din1(i3),
    .ce(1'b1),
    .dout(grp_fu_130_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(G2),
    .din1(i4),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(G1),
    .din1(i4),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(G2),
    .din1(i3),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op13_reg_308),
    .din1(G1),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op14_reg_315),
    .din1(G2),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op14_reg_315),
    .din1(G1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op13_reg_308),
    .din1(G2),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp8_reg_337),
    .din1(tmp7_reg_332),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(GG1),
    .din1(i1),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(GG2),
    .din1(i2),
    .ce(1'b1),
    .dout(grp_fu_204_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op20_reg_342),
    .din1(G1),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(op19_reg_348),
    .din1(G2),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_374),
    .din1(G2),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

hls_macc_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_macc_mul_32s_bkb_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_379),
    .din1(G1),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        op13_reg_308 <= op13_fu_159_p2;
        op14_reg_315 <= op14_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        op17_reg_322 <= grp_fu_174_p2;
        op18_reg_327 <= grp_fu_178_p2;
        tmp7_reg_332 <= grp_fu_182_p2;
        tmp8_reg_337 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        op19_reg_348 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        op1_reg_384 <= grp_fu_198_p2;
        op21_reg_394 <= grp_fu_210_p2;
        op22_reg_399 <= grp_fu_214_p2;
        op2_reg_389 <= grp_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        op20_reg_342 <= op20_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op5_reg_288 <= grp_fu_130_p2;
        op6_reg_293 <= grp_fu_136_p2;
        op7_reg_298 <= grp_fu_142_p2;
        op8_reg_303 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp1_reg_404 <= grp_fu_228_p2;
        tmp3_reg_409 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp2_reg_379 <= tmp2_fu_223_p2;
        tmp_reg_374 <= tmp_fu_218_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        o1_ap_vld = 1'b1;
    end else begin
        o1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        o2_ap_vld = 1'b1;
    end else begin
        o2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        o3_ap_vld = 1'b1;
    end else begin
        o3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        o4_ap_vld = 1'b1;
    end else begin
        o4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign o1 = op13_reg_308;

assign o2 = op14_reg_315;

assign o3 = (tmp6_fu_240_p2 + tmp9_fu_236_p2);

assign o4 = (tmp3_reg_409 + tmp1_reg_404);

assign op13_fu_159_p2 = (tmp4_fu_154_p2 + op5_reg_288);

assign op14_fu_169_p2 = (tmp5_fu_164_p2 + op7_reg_298);

assign op20_fu_194_p2 = (op17_reg_322 + op18_reg_327);

assign tmp2_fu_223_p1 = i2;

assign tmp2_fu_223_p2 = ($signed(op19_reg_348) + $signed(tmp2_fu_223_p1));

assign tmp4_fu_154_p2 = (op6_reg_293 + i5);

assign tmp5_fu_164_p2 = (op8_reg_303 + i6);

assign tmp6_fu_240_p2 = (op22_reg_399 + op21_reg_394);

assign tmp9_fu_236_p2 = (op2_reg_389 + op1_reg_384);

assign tmp_fu_218_p1 = i1;

assign tmp_fu_218_p2 = ($signed(op20_reg_342) + $signed(tmp_fu_218_p1));

endmodule //hls_macc
