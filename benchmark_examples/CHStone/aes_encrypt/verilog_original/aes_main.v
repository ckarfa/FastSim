// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_main,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.397000,HLS_SYN_LAT=661,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=573,HLS_SYN_LUT=1810,HLS_VERSION=2018_3}" *)

module aes_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] word_address0;
reg    word_ce0;
reg    word_we0;
wire   [31:0] word_q0;
reg   [8:0] word_address1;
reg    word_ce1;
wire   [31:0] word_q1;
reg   [4:0] key_address0;
reg    key_ce0;
reg    key_we0;
reg   [31:0] key_d0;
wire   [31:0] key_q0;
reg   [4:0] key_address1;
reg    key_ce1;
reg    key_we1;
reg   [31:0] key_d1;
reg   [4:0] statemt_address0;
reg    statemt_ce0;
reg    statemt_we0;
reg   [31:0] statemt_d0;
wire   [31:0] statemt_q0;
reg   [4:0] statemt_address1;
reg    statemt_ce1;
reg    statemt_we1;
reg   [31:0] statemt_d1;
wire   [31:0] statemt_q1;
wire   [3:0] out_enc_statemt_address0;
reg    out_enc_statemt_ce0;
wire   [7:0] out_enc_statemt_q0;
reg   [31:0] main_result;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] reg_406;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_400_p2;
reg   [31:0] reg_411;
wire   [2:0] j_fu_422_p2;
reg   [2:0] j_reg_559;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_i_i_fu_416_p2;
wire   [3:0] tmp_i_i_8_fu_446_p3;
reg   [3:0] tmp_i_i_8_reg_574;
reg   [4:0] statemt_addr_reg_580;
reg   [4:0] statemt_addr_1_reg_585;
reg   [4:0] statemt_addr_2_reg_600;
reg   [4:0] statemt_addr_3_reg_605;
wire   [4:0] i_fu_514_p2;
reg   [4:0] i_reg_613;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond_i_fu_508_p2;
wire    grp_KeySchedule_fu_382_ap_start;
wire    grp_KeySchedule_fu_382_ap_done;
wire    grp_KeySchedule_fu_382_ap_idle;
wire    grp_KeySchedule_fu_382_ap_ready;
wire   [4:0] grp_KeySchedule_fu_382_key_address0;
wire    grp_KeySchedule_fu_382_key_ce0;
wire   [8:0] grp_KeySchedule_fu_382_word_address0;
wire    grp_KeySchedule_fu_382_word_ce0;
wire    grp_KeySchedule_fu_382_word_we0;
wire   [31:0] grp_KeySchedule_fu_382_word_d0;
wire   [8:0] grp_KeySchedule_fu_382_word_address1;
wire    grp_KeySchedule_fu_382_word_ce1;
reg   [2:0] j_i_i_reg_359;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
reg   [4:0] i_1_i_reg_371;
wire    ap_CS_fsm_state16;
reg    grp_KeySchedule_fu_382_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_i_i_fu_428_p1;
wire   [63:0] tmp_fu_433_p3;
wire   [63:0] tmp_20_i_i_fu_454_p1;
wire   [63:0] tmp_23_i_i_fu_465_p1;
wire   [63:0] tmp_1_fu_470_p3;
wire   [63:0] tmp_2_fu_479_p3;
wire   [63:0] tmp_26_i_i_fu_493_p1;
wire   [63:0] tmp_29_i_i_fu_503_p1;
wire   [63:0] tmp_4_i_fu_520_p1;
wire   [31:0] tmp_7_i_fu_544_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [1:0] tmp_3_fu_442_p1;
wire   [3:0] tmp_22_i_i_fu_459_p2;
wire   [3:0] tmp_25_i_i_fu_488_p2;
wire   [3:0] tmp_28_i_i_fu_498_p2;
wire   [31:0] out_enc_statemt_load_1_fu_526_p1;
wire   [0:0] tmp_5_i_fu_530_p2;
wire   [31:0] tmp_6_i_fu_536_p1;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 main_result = 32'd0;
#0 grp_KeySchedule_fu_382_ap_start_reg = 1'b0;
end

aes_main_word #(
    .DataWidth( 32 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
word_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(word_address0),
    .ce0(word_ce0),
    .we0(word_we0),
    .d0(grp_KeySchedule_fu_382_word_d0),
    .q0(word_q0),
    .address1(word_address1),
    .ce1(word_ce1),
    .q1(word_q1)
);

aes_main_key #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_address0),
    .ce0(key_ce0),
    .we0(key_we0),
    .d0(key_d0),
    .q0(key_q0),
    .address1(key_address1),
    .ce1(key_ce1),
    .we1(key_we1),
    .d1(key_d1)
);

aes_main_statemt #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(statemt_address0),
    .ce0(statemt_ce0),
    .we0(statemt_we0),
    .d0(statemt_d0),
    .q0(statemt_q0),
    .address1(statemt_address1),
    .ce1(statemt_ce1),
    .we1(statemt_we1),
    .d1(statemt_d1),
    .q1(statemt_q1)
);

aes_main_out_enc_cud #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_enc_statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_enc_statemt_address0),
    .ce0(out_enc_statemt_ce0),
    .q0(out_enc_statemt_q0)
);

KeySchedule grp_KeySchedule_fu_382(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeySchedule_fu_382_ap_start),
    .ap_done(grp_KeySchedule_fu_382_ap_done),
    .ap_idle(grp_KeySchedule_fu_382_ap_idle),
    .ap_ready(grp_KeySchedule_fu_382_ap_ready),
    .key_address0(grp_KeySchedule_fu_382_key_address0),
    .key_ce0(grp_KeySchedule_fu_382_key_ce0),
    .key_q0(key_q0),
    .word_address0(grp_KeySchedule_fu_382_word_address0),
    .word_ce0(grp_KeySchedule_fu_382_word_ce0),
    .word_we0(grp_KeySchedule_fu_382_word_we0),
    .word_d0(grp_KeySchedule_fu_382_word_d0),
    .word_q0(word_q0),
    .word_address1(grp_KeySchedule_fu_382_word_address1),
    .word_ce1(grp_KeySchedule_fu_382_word_ce1),
    .word_q1(word_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeySchedule_fu_382_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_KeySchedule_fu_382_ap_start_reg <= 1'b1;
        end else if ((grp_KeySchedule_fu_382_ap_ready == 1'b1)) begin
            grp_KeySchedule_fu_382_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond_i_i_fu_416_p2 == 1'd1))) begin
        i_1_i_reg_371 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_1_i_reg_371 <= i_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_i_i_reg_359 <= j_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1))) begin
        j_i_i_reg_359 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_613 <= i_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_559 <= j_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        main_result <= tmp_7_i_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_406 <= grp_fu_394_p2;
        reg_411 <= grp_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond_i_i_fu_416_p2 == 1'd0))) begin
        statemt_addr_1_reg_585[3 : 2] <= tmp_23_i_i_fu_465_p1[3 : 2];
        statemt_addr_reg_580[3 : 2] <= tmp_20_i_i_fu_454_p1[3 : 2];
        tmp_i_i_8_reg_574[3 : 2] <= tmp_i_i_8_fu_446_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_addr_2_reg_600[3 : 2] <= tmp_26_i_i_fu_493_p1[3 : 2];
        statemt_addr_3_reg_605[3 : 2] <= tmp_29_i_i_fu_503_p1[3 : 2];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_i_fu_508_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_i_fu_508_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address0 = 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        key_address0 = grp_KeySchedule_fu_382_key_address0;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address1 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address1 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address1 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address1 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address1 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address1 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address1 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address1 = 5'd1;
    end else begin
        key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        key_ce0 = grp_KeySchedule_fu_382_key_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_d0 = 32'd79;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_d0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_d0 = 32'd171;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_d0 = 32'd210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_d0 = 32'd40;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        key_d0 = 32'd21;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_d0 = 32'd43;
    end else begin
        key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        key_d1 = 32'd60;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_d1 = 32'd207;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_d1 = 32'd136;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_d1 = 32'd247;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_d1 = 32'd166;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_d1 = 32'd174;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_d1 = 32'd22;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_d1 = 32'd126;
    end else begin
        key_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_we0 = 1'b1;
    end else begin
        key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_we1 = 1'b1;
    end else begin
        key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_enc_statemt_ce0 = 1'b1;
    end else begin
        out_enc_statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        statemt_address0 = tmp_4_i_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        statemt_address0 = statemt_addr_2_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        statemt_address0 = statemt_addr_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address0 = tmp_26_i_i_fu_493_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address0 = tmp_20_i_i_fu_454_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = 5'd0;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        statemt_address1 = statemt_addr_3_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        statemt_address1 = statemt_addr_1_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address1 = tmp_29_i_i_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address1 = tmp_23_i_i_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address1 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_address1 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address1 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address1 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_address1 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = 5'd1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1)))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1)))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_d0 = reg_406;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_d0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_d0 = 32'd224;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_d0 = 32'd152;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d0 = 32'd49;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_d0 = 32'd48;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_d0 = 32'd136;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d0 = 32'd246;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_d0 = 32'd50;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        statemt_d1 = reg_411;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_d1 = 32'd52;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        statemt_d1 = 32'd55;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_d1 = 32'd162;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d1 = 32'd49;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        statemt_d1 = 32'd141;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_d1 = 32'd90;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d1 = 32'd168;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_d1 = 32'd67;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1)))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1)))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        word_address0 = tmp_1_fu_470_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        word_address0 = tmp_i_i_fu_428_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_address0 = grp_KeySchedule_fu_382_word_address0;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        word_address1 = tmp_2_fu_479_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        word_address1 = tmp_fu_433_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_address1 = grp_KeySchedule_fu_382_word_address1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        word_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_ce0 = grp_KeySchedule_fu_382_word_ce0;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        word_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_ce1 = grp_KeySchedule_fu_382_word_ce1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        word_we0 = grp_KeySchedule_fu_382_word_we0;
    end else begin
        word_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_KeySchedule_fu_382_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_i_i_fu_416_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond_i_fu_508_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = 32'd0;

assign exitcond_i_fu_508_p2 = ((i_1_i_reg_371 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_416_p2 = ((j_i_i_reg_359 == 3'd4) ? 1'b1 : 1'b0);

assign grp_KeySchedule_fu_382_ap_start = grp_KeySchedule_fu_382_ap_start_reg;

assign grp_fu_394_p2 = (word_q0 ^ statemt_q0);

assign grp_fu_400_p2 = (word_q1 ^ statemt_q1);

assign i_fu_514_p2 = (i_1_i_reg_371 + 5'd1);

assign j_fu_422_p2 = (j_i_i_reg_359 + 3'd1);

assign out_enc_statemt_address0 = tmp_4_i_fu_520_p1;

assign out_enc_statemt_load_1_fu_526_p1 = out_enc_statemt_q0;

assign tmp_1_fu_470_p3 = {{61'd30}, {j_i_i_reg_359}};

assign tmp_20_i_i_fu_454_p1 = tmp_i_i_8_fu_446_p3;

assign tmp_22_i_i_fu_459_p2 = (tmp_i_i_8_fu_446_p3 | 4'd1);

assign tmp_23_i_i_fu_465_p1 = tmp_22_i_i_fu_459_p2;

assign tmp_25_i_i_fu_488_p2 = (tmp_i_i_8_reg_574 | 4'd2);

assign tmp_26_i_i_fu_493_p1 = tmp_25_i_i_fu_488_p2;

assign tmp_28_i_i_fu_498_p2 = (tmp_i_i_8_reg_574 | 4'd3);

assign tmp_29_i_i_fu_503_p1 = tmp_28_i_i_fu_498_p2;

assign tmp_2_fu_479_p3 = {{61'd45}, {j_i_i_reg_359}};

assign tmp_3_fu_442_p1 = j_i_i_reg_359[1:0];

assign tmp_4_i_fu_520_p1 = i_1_i_reg_371;

assign tmp_5_i_fu_530_p2 = ((statemt_q0 != out_enc_statemt_load_1_fu_526_p1) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_536_p1 = tmp_5_i_fu_530_p2;

assign tmp_7_i_fu_544_p2 = (main_result + tmp_6_i_fu_536_p1);

assign tmp_fu_433_p3 = {{61'd15}, {j_i_i_reg_359}};

assign tmp_i_i_8_fu_446_p3 = {{tmp_3_fu_442_p1}, {2'd0}};

assign tmp_i_i_fu_428_p1 = j_i_i_reg_359;

always @ (posedge ap_clk) begin
    tmp_i_i_8_reg_574[1:0] <= 2'b00;
    statemt_addr_reg_580[1:0] <= 2'b00;
    statemt_addr_reg_580[4] <= 1'b0;
    statemt_addr_1_reg_585[1:0] <= 2'b01;
    statemt_addr_1_reg_585[4] <= 1'b0;
    statemt_addr_2_reg_600[1:0] <= 2'b10;
    statemt_addr_2_reg_600[4] <= 1'b0;
    statemt_addr_3_reg_605[1:0] <= 2'b11;
    statemt_addr_3_reg_605[4] <= 1'b0;
end

endmodule //aes_main
