// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 


module hls_macc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in2,
        in3,
        in4,
        in7,
        in8,
        in9,
        in10,
        in14,
        in12,
        in15,
        in17,
        in19,
        in20,
        in22,
        in24,
        in27,
        in28,
        in29,
        in32,
        out13,
        out13_ap_vld,
        out30,
        out30_ap_vld,
        out31,
        out31_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input  [31:0] in2;
input  [31:0] in3;
input  [31:0] in4;
input  [31:0] in7;
input  [31:0] in8;
input  [31:0] in9;
input  [31:0] in10;
input  [31:0] in14;
input  [31:0] in12;
input  [31:0] in15;
input  [31:0] in17;
input  [31:0] in19;
input  [31:0] in20;
input  [31:0] in22;
input  [31:0] in24;
input  [31:0] in27;
input  [31:0] in28;
input  [31:0] in29;
input  [31:0] in32;
output  [31:0] out13;
output   out13_ap_vld;
output  [31:0] out30;
output   out30_ap_vld;
output  [31:0] out31;
output   out31_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out13_ap_vld;
reg out30_ap_vld;
reg out31_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] t5_fu_206_p2;
reg   [31:0] t5_reg_293;
wire   [31:0] tmp1_fu_212_p2;
reg   [31:0] tmp1_reg_299;
wire    ap_CS_fsm_state2;
wire   [31:0] t11_fu_225_p2;
reg   [31:0] t11_reg_334;
wire   [0:0] tmp_2_fu_236_p2;
reg   [0:0] tmp_2_reg_343;
wire   [0:0] tmp_fu_230_p2;
wire   [31:0] tmp2_fu_242_p2;
reg   [31:0] tmp2_reg_348;
wire   [31:0] tmp3_fu_247_p2;
reg   [31:0] tmp3_reg_353;
wire   [31:0] t23_fu_253_p2;
reg   [31:0] t23_reg_358;
wire    ap_CS_fsm_state3;
wire   [31:0] t26_1_fu_257_p2;
reg   [31:0] t26_1_reg_363;
wire   [31:0] t25_fu_261_p2;
reg   [31:0] t25_reg_368;
wire    ap_CS_fsm_state4;
wire   [31:0] t26_fu_265_p2;
reg   [31:0] t26_reg_373;
wire    ap_CS_fsm_state5;
wire   [31:0] t26_2_fu_269_p3;
reg   [31:0] t26_2_reg_378;
wire    ap_CS_fsm_state6;
wire   [31:0] t16_1_fu_274_p2;
reg   [31:0] t16_1_reg_384;
wire    ap_CS_fsm_state7;
wire   [31:0] t16_fu_283_p2;
reg   [31:0] t16_reg_389;
wire    ap_CS_fsm_state9;
reg   [31:0] t8_reg_197;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t8_reg_197 <= t16_1_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t8_reg_197 <= t16_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t11_reg_334 <= t11_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t16_1_reg_384 <= t16_1_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t16_reg_389 <= t16_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_343 == 1'd1))) begin
        t23_reg_358 <= t23_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_343 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t25_reg_368 <= t25_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_343 == 1'd0))) begin
        t26_1_reg_363 <= t26_1_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t26_2_reg_378 <= t26_2_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_343 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t26_reg_373 <= t26_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t5_reg_293 <= t5_fu_206_p2;
        tmp1_reg_299 <= tmp1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_230_p2 == 1'd0))) begin
        tmp2_reg_348 <= tmp2_fu_242_p2;
        tmp3_reg_353 <= tmp3_fu_247_p2;
        tmp_2_reg_343 <= tmp_2_fu_236_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out13_ap_vld = 1'b1;
    end else begin
        out13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out30_ap_vld = 1'b1;
    end else begin
        out30_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out31_ap_vld = 1'b1;
    end else begin
        out31_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_230_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign out13 = (in14 - in15);

assign out30 = (t26_2_reg_378 + in29);

assign out31 = (t8_reg_197 + in32);

assign t11_fu_225_p2 = (tmp1_reg_299 + in8);

assign t16_1_fu_274_p2 = (t26_2_reg_378 - in28);

assign t16_fu_283_p2 = (t11_reg_334 - in17);

assign t23_fu_253_p2 = (tmp2_reg_348 + t11_reg_334);

assign t25_fu_261_p2 = (t23_reg_358 - in24);

assign t26_1_fu_257_p2 = (tmp3_reg_353 + t5_reg_293);

assign t26_2_fu_269_p3 = ((tmp_2_reg_343_temp === 1'b1) ? t26_reg_373 : t26_1_reg_363);

assign tmp_2_reg_343_temp = tmp_2_reg_343;

assign t26_fu_265_p2 = (t25_reg_368 + in27);

assign t5_fu_206_p2 = (in3 - in4);

assign tmp1_fu_212_p2 = (in7 + in12);

assign tmp2_fu_242_p2 = (t5_reg_293 + in22);

assign tmp3_fu_247_p2 = (in19 + in20);

assign tmp_2_fu_236_p2 = (($signed(in9) < $signed(in10)) ? 1'b1 : 1'b0);

assign tmp_fu_230_p2 = ((in2 == in1) ? 1'b1 : 1'b0);

endmodule //hls_macc
